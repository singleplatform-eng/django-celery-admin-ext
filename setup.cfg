[metadata]
name = django-celery-admin-ext
version = 1.0+singleplatform.1
#version (omitted using scm version instead)
url = http://github.com/singleplatform-ext/django-celery-admin-ext
project_urls =
    Upstream = http://github.com/mattcaldwell/django-celery-admin-ext
author = Matt Caldwell
author_email = mcaldwel@ngs.org
maintainer = SinglePlatform Engineering Team
maintainer_email = techservices@singleplatform.com
classifiers =
    Development Status :: 4 - Beta
    Environment :: Web Environment
    Framework :: Django
    Intended Audience :: Developers
    License :: OSI Approved :: BSD License
    Operating System :: OS Independent
    Programming Language :: Python
license = BSD License
license_file = LICENSE
description = A django application that lets you kick off periodic celery tasks from the admin.
long_description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8

[options]
zip_safe = False
include_package_data = True

[bdist_wheel]
# This flag says that the code is written to work on both Python 2 and Python
# 3. If at all possible, it is good practice to do this. If you cannot, you
# will need to generate wheels for each Python version that you support.
universal=1

[pep8]
#ignore = W601   # taken from django
exclude = build,.git,.tox,./django/utils/six.py,./django/conf/app_template/*,./tests/.env
max-line-length = 120

[flake8]
#ignore = W601   # taken from django
exclude = build,.git,.tox,./django/utils/six.py,./django/conf/app_template/*,./tests/.env
max-line-length = 120
import-order-style = pep8

[pycodestyle]
#ignore = W601   # taken from django
exclude = build,.git,.tox,./django/utils/six.py,./django/conf/app_template/*,./tests/.env
max-line-length = 120

[tool:pytest]
addopts = --reuse-db
testpaths = apps libs
DJANGO_SETTINGS_MODULE = spdj.settings.local_test
python_files = tests.py test_*.py
norecursedirs = *.egg-info .git .tox _static static node_modules htmlcov

[isort]
combine_as_imports = true
default_section = FIRSTPARTY
known_django = django, rest_framework, simple_history, waffle, celery
known_future_library = six
known_third_party = xmlfromdict
line_length = 120
indent='    '
multi_line_output = 3
not_skip = __init__.py
sections=FUTURE,STDLIB,THIRDPARTY,DJANGO,FIRSTPARTY,LOCALFOLDER

[check-manifest]
ignore =
    .editorconfig
    .pylintrc
    .env_setup_script
    buildspec.yml
    dependencies-buildspec.yml
    local_requirements.txt
    package.json
    requirements.txt
    static/less/*
    libs/nltk_data/*

